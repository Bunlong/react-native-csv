{"code":"_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[8],{Qetd:function(e,n,a){\"use strict\";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},RNiq:function(e,n,a){\"use strict\";a.r(n);var r=a(\"q1tI\"),t=a.n(r),l=t.a.createElement,o=function(){return l(\"div\",{id:\"skrollr-body\"},l(\"div\",{id:\"top\",\"data-top\":\"bottom: 0px; opacity: 1;\",\"data-top-bottom\":\"bottom: -350px; opacity: .3;\"},l(\"div\",{className:\"grid-container\"},l(\"div\",{className:\"grid-100\"},l(\"div\",{id:\"title-main\"},l(\"h1\",null,\"react-papaparse\"),l(\"h2\",null,\"The powerful, in-browser React CSV parser for big boys and girls\"),l(\"a\",{href:\"#download\",className:\"button\"},l(\"i\",{className:\"fa fa-download\"}),\"\\xa0 Install\"),l(\"a\",{href:\"/demo\",className:\"button red\"},l(\"i\",{className:\"fa fa-magic\"}),\"\\xa0 Demo\"),l(\"a\",{href:\"/docs\",className:\"button gray\"},l(\"i\",{className:\"fa fa-book\"}),\"\\xa0 Documentation\")),l(\"div\",{id:\"title-code\"},l(\"pre\",null,l(\"code\",{className:\"language-javascript\"},\"// Parse CSV string\\nconst data = readString(csvString)\\n\\n// Convert back to CSV\\nconst csv = jsonToCSV(jsonData)\\n\\n// Parse local CSV file\\n<CSVReader \\n  onDrop={this.handleOnDrop}\\n  onError={this.handleOnError}\\n  noDrag\\n  addRemoveButton\\n  onRemoveFile={this.handleOnRemoveFile}\\n>\\n  <span>Click to upload.</span>\\n</CSVReader>\\n\\n// Stream big file in worker thread\\nreadRemoteFile(bigFileURL, {\\n  worker: true,\\n  step: (results) => {\\n    console.log('Row:', results.data)\\n  }\\n})\")))))))},i=t.a.createElement,s=function(){return i(t.a.Fragment,null,i(\"header\",null,i(\"div\",{className:\"grid-container\"},i(\"div\",{className:\"grid-40 mobile-grid-50\"},i(\"div\",{className:\"links\"},i(\"a\",{href:\"/demo\"},i(\"i\",{className:\"fa fa-magic fa-lg\"}),\" Demo\"),i(\"a\",{href:\"/docs\"},i(\"i\",{className:\"fa fa-book fa-lg\"}),\" Docs\"))),i(\"div\",{className:\"grid-20 hide-on-mobile text-center\"},i(\"a\",{href:\"/\",className:\"text-logo\"},\"react-papaparse 3\")),i(\"div\",{className:\"grid-40 mobile-grid-50 text-right\"},i(\"div\",{className:\"links\"},i(\"a\",{href:\"https://github.com/Bunlong/react-papaparse\"},i(\"i\",{className:\"fa fa-github fa-lg\"}),\" GitHub\"))))),i(\"div\",{className:\"insignia\"},i(\"div\",{className:\"firefox-hack\"},i(\"div\",{id:\"version-intro\"},\"Version\"),i(\"div\",{id:\"version\"},\"3\"))))},d=t.a.createElement,c=function(){return d(\"section\",{style:{paddingTop:0}},d(\"div\",{className:\"grid-container\"},d(\"div\",{className:\"grid-100\"},d(\"h3\",null,\"Features\"))),d(\"div\",{id:\"ticker\"},d(\"div\",{className:\"ticker-item current\"},d(\"p\",null,\"Now the fastest React CSV parser for the browser\")),d(\"div\",{className:\"ticker-item\"},d(\"p\",null,\"The world's first multi-threaded CSV parser for the browser\")),d(\"div\",{className:\"ticker-item\"},d(\"p\",null,\"react-papaparse can handle files gigabytes in size without crashing\")),d(\"div\",{className:\"ticker-item\"},d(\"p\",null,\"Use react-papaparse when performance, privacy, and correctness matter to you\")),d(\"div\",{className:\"ticker-item\"},d(\"p\",null,\"react-papaparse alleviates privacy concerns related to uploading files\")),d(\"div\",{className:\"ticker-item\"},d(\"p\",null,\"Malformed CSV is handled gracefully with a detailed error report\"))),d(\"div\",{className:\"grid-container\"},d(\"div\",{className:\"grid-33\"},d(\"li\",null,\"CSV\\u2192JSON and \",d(\"a\",{href:\"#unparse\"},\"JSON\\u2192CSV\")),d(\"li\",null,\"Auto-detect \",d(\"a\",{href:\"#delimiter\"},\"delimiter\")),d(\"li\",null,d(\"a\",{href:\"#local-files\"},\"Open local files\")),d(\"li\",null,d(\"a\",{href:\"#remote-files\"},\"Download remote files\"))),d(\"div\",{className:\"grid-33\"},d(\"li\",null,d(\"a\",{href:\"#stream\"},\"Stream\"),\" local and remote files\"),d(\"li\",null,d(\"a\",{href:\"#worker\"},\"Multi-threaded\")),d(\"li\",null,d(\"a\",{href:\"#header\"},\"Header row\"),\" support\"),d(\"li\",null,d(\"a\",{href:\"#type-conversion\"},\"Type conversion\"))),d(\"div\",{className:\"grid-33\"},d(\"li\",null,\"Skip \",d(\"a\",{href:\"#comments\"},\"commented lines\")),d(\"li\",null,\"Fast mode\"),d(\"li\",null,\"Graceful \",d(\"a\",{href:\"#errors\"},\"error\"),\" handling\"),d(\"li\",null,\"Easy to use\")),d(\"div\",{className:\"clear\"}),d(\"br\",null),d(\"br\",null),d(\"div\",{className:\"grid-100 text-center\"},d(\"a\",{href:\"https://github.com/Bunlong/react-papaparse\",className:\"button\"},d(\"i\",{className:\"fa fa-github\"}),\"\\xa0 GitHub\"),d(\"a\",{href:\"/docs\",className:\"button gray\"},d(\"i\",{className:\"fa fa-book\"}),\"\\xa0 Documentation\"))))},p=t.a.createElement,m=function(){return p(\"section\",null,p(\"div\",{className:\"grid-container narrow-grid\"},p(\"div\",{className:\"grid-100\"},p(\"h3\",null,\"Frameworks\"),p(\"p\",null,\"react-papaparse strongly support\",\" \",p(\"a\",{href:\"https://nextjs.org\",target:\"blank\"},\"Next.js\"),\",\",\" \",p(\"a\",{href:\"https://create-react-app.dev\",target:\"blank\"},\"Create React App\"),\" \",\"and other React frameworks. react-papaparse is the fastest React CSV parser for the browser (only works in the browser), so you need to set the component with no SSR (server-side render)\",\" \",p(\"b\",null,\"in case you use \",p(\"code\",null,\"readRemoteFile\"),\" function\"),\".\"),p(\"div\",null,p(\"ul\",null,p(\"li\",null,p(\"a\",{href:\"https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr\",target:\"blank\"},\"Next.js \\u2014 component with no SSR\")))))))},u=t.a.createElement,g=function(){return u(\"section\",null,u(\"div\",{className:\"grid-container\"},u(\"div\",{className:\"grid-100 text-center\"},u(\"h3\",null,\"People \",u(\"i\",{className:\"fa fa-heart\"}),\" react-papaparse\"),u(\"p\",null,u(\"a\",{href:\"https://www.npmjs.com/package/react-papaparse\"},u(\"img\",{src:\"https://img.shields.io/npm/dm/react-papaparse.svg\",alt:\"react-papaparse\"}))))))},h=t.a.createElement,f=function(){return h(\"section\",{id:\"parse\"},h(\"div\",{className:\"grid-container narrow-grid\"},h(\"div\",{className:\"grid-100\"},h(\"h4\",null,\"CSV Parsing\"),h(\"h5\",null,\"\\\"Isn't parsing CSV just \",h(\"code\",null,\"String.split(',')\"),'?\"'),h(\"p\",null,\"react-papaparse does it right. Just pass in the CSV string with an optional \",h(\"a\",{href:\"/docs#config\"},\"configuration\"),\".\"),h(\"pre\",null,h(\"code\",{className:\"language-javascript\"},\"import { readString } from 'react-papaparse'\\n\\nconst results = readString(csvString, config)\\n\\n/*\\nresults = {\\n  data: [ ... ],    // parsed data\\n  errors: [ ... ],  // errors encountered\\n  meta: { ... }     // extra parse info\\n}\\n*/\")))))},v=t.a.createElement,N=function(){return v(\"section\",{id:\"delimiter\"},v(\"div\",{className:\"grid-container narrow-grid\"},v(\"div\",{className:\"grid-100\"},v(\"h4\",null,\"Delimiter Detection\"),v(\"h5\",null,'\"But I don\\'t know the delimiter...\"'),v(\"p\",null,\"That's okay. react-papaparse will scan the first few rows to find the right delimiter.\"),v(\"pre\",null,v(\"code\",{className:\"language-javascript\"},\"import { readString } from 'react-papaparse'\\n\\nconst results = readString(csvString)\\n\\nconsole.log(results.meta.delimiter)\\n\\n\",v(\"span\",null,String.fromCharCode(47),String.fromCharCode(47),' \"',String.fromCharCode(92),'t\"'))))))},y=t.a.createElement,b=function(){return y(\"section\",{id:\"local-files\"},y(\"div\",{className:\"grid-container narrow-grid\"},y(\"div\",{className:\"grid-100\"},y(\"h4\",null,\"Local Files\"),y(\"h5\",null,'\"Great, but I have a ',y(\"i\",null,\"file\"),' to parse.\"'),y(\"p\",null,\"Then use CSVReader component instead of readString method. Since file parsing is asynchronous, don't forget callback methods.\"),y(\"div\",{id:\"drag-no-click-upload\",style:{fontSize:20,marginTop:10}},\"Basic Upload\"),y(\"div\",{style:{textAlign:\"center\",paddingTop:50,paddingBottom:50}},y(\"img\",{src:\"/static/images/csvreader1.png\",alt:\"Basic Upload\",style:{maxWidth:\"100%\",height:\"auto\"}})),y(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginBottom:14}},y(\"a\",{href:\"/docs#basic-upload\"},\"Properties\"),\"\\xa0 | \\xa0\",y(\"a\",{href:\"/demo\"},\"Demo\")),y(\"pre\",null,y(\"code\",{className:\"language-javascript\"},\"import React, { Component } from 'react'\\n\\nimport { CSVReader } from 'react-papaparse'\\n\\nconst buttonRef = React.createRef()\\n\\nexport default class CSVReader extends Component {\\n  handleOpenDialog = (e) => {\\n    // Note that the ref is set async, so it might be null at some point \\n    if (buttonRef.current) {\\n      buttonRef.current.open(e)\\n    }\\n  }\\n  \\n  handleOnFileLoad = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  handleOnError = (err, file, inputElem, reason) => {\\n    console.log(err)\\n  }\\n\\n  handleOnRemoveFile = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  handleRemoveFile = (e) => {\\n    // Note that the ref is set async, so it might be null at some point\\n    if (buttonRef.current) {\\n      buttonRef.current.removeFile(e)\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <CSVReader\\n        ref={buttonRef}\\n        onFileLoad={this.handleOnFileLoad}\\n        onError={this.handleOnError}\\n        noClick\\n        noDrag\\n        onRemoveFile={this.handleOnRemoveFile}\\n      >\\n        {({ file }) => (\\n          <aside\\n            style={{\\n              display: 'flex',\\n              flexDirection: 'row',\\n              marginBottom: 10\\n            }}\\n          >\\n            <button\\n              type='button'\\n              onClick={this.handleOpenDialog}\\n              style={{\\n                borderRadius: 0,\\n                marginLeft: 0,\\n                marginRight: 0,\\n                width: '40%',\\n                paddingLeft: 0,\\n                paddingRight: 0\\n              }}\\n            >\\n              Browe file\\n            </button>\\n            <div\\n              style={{\\n                borderWidth: 1,\\n                borderStyle: 'solid',\\n                borderColor: '#ccc',\\n                height: 45,\\n                lineHeight: 2.5,\\n                marginTop: 5,\\n                marginBottom: 5,\\n                paddingLeft: 13,\\n                paddingTop: 3,\\n                width: '60%'\\n              }}\\n            >\\n              {file && file.name}\\n            </div>\\n            <button\\n              style={{\\n                borderRadius: 0,\\n                marginLeft: 0,\\n                marginRight: 0,\\n                paddingLeft: 20,\\n                paddingRight: 20\\n              }}\\n              onClick={this.handleRemoveFile}\\n            >\\n              Remove\\n            </button>\\n          </aside>\\n        )}\\n      </CSVReader>\\n    )\\n  }\\n}\")),y(\"div\",{id:\"drag-no-click-upload\",style:{fontSize:20,marginTop:35}},\"Click and Drag Upload\"),y(\"div\",{style:{textAlign:\"center\",paddingTop:50,paddingBottom:50}},y(\"img\",{src:\"/static/images/csvreader2.png\",alt:\"Click and Drag Upload\",style:{maxWidth:\"100%\",height:\"auto\"}})),y(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginBottom:14}},y(\"a\",{href:\"/docs#click-and-drag-upload\"},\"Properties\"),\"\\xa0 | \\xa0\",y(\"a\",{href:\"/demo\"},\"Demo\")),y(\"pre\",null,y(\"code\",{className:\"language-javascript\"},\"import React, { Component } from 'react'\\n\\nimport { CSVReader } from 'react-papaparse'\\n\\nexport default class CSVReader extends Component {\\n  handleOnDrop = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  handleOnError = (err, file, inputElem, reason) => {\\n    console.log(err)\\n  }\\n\\n  handleOnRemoveFile = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  render() {\\n    return (\\n      <CSVReader\\n        onDrop={this.handleOnDrop}\\n        onError={this.handleOnError}\\n        addRemoveButton\\n        onRemoveFile={this.handleOnRemoveFile}\\n      >\\n        <span>Drop CSV file here or click to upload.</span>\\n      </CSVReader>\\n    )\\n  }\\n}\\n\")),y(\"div\",{id:\"drag-no-click-upload\",style:{fontSize:20,marginTop:35}},\"Drag ( No Click ) Upload\"),y(\"div\",{style:{textAlign:\"center\",paddingTop:50,paddingBottom:50}},y(\"img\",{src:\"/static/images/csvreader3.png\",alt:\"Drag ( No Click ) Upload\",style:{maxWidth:\"100%\",height:\"auto\"}})),y(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginBottom:14}},y(\"a\",{href:\"/docs#drag-no-click-upload\"},\"Properties\"),\"\\xa0 | \\xa0\",y(\"a\",{href:\"/demo\"},\"Demo\")),y(\"pre\",null,y(\"code\",{className:\"language-javascript\"},\"import React, { Component } from 'react'\\n\\nimport { CSVReader } from 'react-papaparse'\\n\\nexport default class CSVReader extends Component {\\n  handleOnDrop = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  handleOnError = (err, file, inputElem, reason) => {\\n    console.log(err)\\n  }\\n\\n  handleOnRemoveFile = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  render() {\\n    return (\\n      <CSVReader\\n        onDrop={this.handleOnDrop}\\n        onError={this.handleOnError}\\n        noClick\\n        addRemoveButton\\n        onRemoveFile={this.handleOnRemoveFile}\\n      >\\n        <span>Drop CSV file here to upload.</span>\\n      </CSVReader>\\n    )\\n  }\\n}\")),y(\"div\",{id:\"drag-no-click-upload\",style:{fontSize:20,marginTop:35}},\"Click ( No Drag ) Upload\"),y(\"div\",{style:{textAlign:\"center\",paddingTop:50,paddingBottom:50}},y(\"img\",{src:\"/static/images/csvreader4.png\",alt:\"Click ( No Drag ) Upload\",style:{maxWidth:\"100%\",height:\"auto \"}})),y(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginBottom:14}},y(\"a\",{href:\"/docs#click-no-drag-upload\"},\"Properties\"),\"\\xa0 | \\xa0\",y(\"a\",{href:\"/demo\"},\"Demo\")),y(\"pre\",null,y(\"code\",{className:\"language-javascript\"},\"import React, { Component } from 'react'\\n\\nimport { CSVReader } from 'react-papaparse'\\n\\nexport default class CSVReader extends Component {\\n  handleOnDrop = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  handleOnError = (err, file, inputElem, reason) => {\\n    console.log(err)\\n  }\\n\\n  handleOnRemoveFile = (data) => {\\n    console.log('---------------------------')\\n    console.log(data)\\n    console.log('---------------------------')\\n  }\\n\\n  render() {\\n    return (\\n      <CSVReader\\n        onDrop={this.handleOnDrop}\\n        onError={this.handleOnError}\\n        noDrag\\n        addRemoveButton\\n        onRemoveFile={this.handleOnRemoveFile}\\n      >\\n        <span>Click to upload.</span>\\n      </CSVReader>\\n    )\\n  }\\n}\")))))},w=t.a.createElement,R=function(){return w(\"section\",{id:\"remote-files\"},w(\"div\",{className:\"grid-container narrow-grid\"},w(\"div\",{className:\"grid-100\"},w(\"h4\",null,\"Remote Files\"),w(\"h5\",null,'\"No \\u2014 I mean, the file isn\\'t on my computer.\"'),w(\"p\",null,\"Oh, well then just pass in the URL and \\u2014 of course \\u2014 a callback.\"),w(\"pre\",null,w(\"code\",{className:\"language-javascript\"},\"readRemoteFile('http://example.com/file.csv', {\\n  download: true,\\n  complete: (results) => {\\n    console.log(results)\\n  }\\n})\")))))},S=t.a.createElement,C=function(){return S(\"section\",{id:\"stream\"},S(\"div\",{className:\"grid-container narrow-grid\"},S(\"div\",{className:\"grid-100\"},S(\"h4\",null,\"Streaming\"),S(\"h5\",null,'\"Did I mention the file is huge?\"'),S(\"p\",null,\"That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser.\"),S(\"pre\",null,S(\"code\",{className:\"language-javascript\"},\"readRemoteFile('http://example.com/big.csv', {\\n  step: (row) => {\\n    console.log('Row:', row.data)\\n  },\\n  complete: () => {\\n    console.log('All done!')\\n  }\\n})\")))))},k=t.a.createElement,x=function(){return k(\"section\",{id:\"worker\"},k(\"div\",{className:\"grid-container narrow-grid\"},k(\"div\",{className:\"grid-100\"},k(\"h4\",null,\"Multi-Threading\"),k(\"h5\",null,\"'Lovely. Now my web page locked up.'\"),k(\"p\",null,\"That happens when a long-running script is executing in the same thread as the page. Use a\",\" \",k(\"a\",{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\"},\"Worker\"),\" \",\"thread by specifying \",k(\"code\",null,\"worker: true\"),\". It may take slightly longer, but your page will stay reactive.\"),k(\"pre\",null,k(\"code\",{className:\"language-javascript\"},\"readRemoteFile(bigFileURL, {\\n  worker: true,\\n  step: (row) => {\\n    console.log('Row:', row.data)\\n  },\\n  complete: () => {\\n    console.log('All done!')\\n  }\\n})\")))))},E=t.a.createElement,D=function(){return E(\"section\",{id:\"header\"},E(\"div\",{className:\"grid-container narrow-grid\"},E(\"div\",{className:\"grid-100\"},E(\"h4\",null,\"Header Row\"),E(\"h5\",null,'\"Great! Now I want data keyed by field name.\"'),E(\"p\",null,\"If you tell react-papaparse there is a header row, each row will be organized by field name instead of index.\"),E(\"pre\",null,E(\"code\",{className:\"language-javascript\"},\"// Key data by field name instead of index/position\\nconst results = readString(csvString {\\n  header: true\\n})\")))))},V=t.a.createElement,O=function(){return V(\"section\",{id:\"type-conversion\"},V(\"div\",{className:\"grid-container narrow-grid\"},V(\"div\",{className:\"grid-100\"},V(\"h4\",null,\"Type Conversion\"),V(\"h5\",null,'\"Hey, these numbers are parsed as strings.\"'),V(\"p\",null,V(\"i\",null,\"Everything\"),\" is parsed as strings. If you want numbers and booleans, you can enable dynamic typing to do the conversion for you.\"),V(\"pre\",null,V(\"code\",{className:\"language-javascript\"},\"// Converts numeric/boolean data\\nconst results = readString(csvString {\\n  dynamicTyping: true\\n})\")))))},F=t.a.createElement,j=function(){return F(\"section\",{id:\"comments\"},F(\"div\",{className:\"grid-container narrow-grid\"},F(\"div\",{className:\"grid-100\"},F(\"h4\",null,\"Comments\"),F(\"h5\",null,'\"I forgot to mention: my CSV files have comments in them.\"'),F(\"p\",null,\"Okay, first off: that's really weird. But fortunately, you can skip those lines... just specify the comment string.\"),F(\"pre\",null,F(\"code\",{className:\"language-javascript\"},\"// Mostly found in academia, some CSV files\\n// may have commented lines in them\\nconst results = readString(csvString {\\n  comments: '#'\\n})\")))))},T=t.a.createElement,B=function(){return T(\"section\",{id:\"errors\"},T(\"div\",{className:\"grid-container narrow-grid\"},T(\"div\",{className:\"grid-100\"},T(\"h4\",null,\"Error Handling\"),T(\"h5\",null,'\"Aw, shoot. Errors.\"'),T(\"p\",null,\"react-papaparse handles errors pretty well. The\",\" \",T(\"a\",{href:\"http://tools.ietf.org/html/rfc4180\"},\"CSV standard\"),\" is somewhat \",T(\"strike\",null,\"loose\"),\" ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing.\"),T(\"pre\",null,T(\"code\",{className:\"language-javascript\"},\"// Example error:\\n{\\n  type: 'FieldMismatch',\\n  code: 'TooManyFields',\\n  message: 'Expected 3 fields, but parsed 4',\\n  row: 1\\n}\")))))},U=t.a.createElement,I=function(){return U(\"section\",{id:\"unparse\"},U(\"div\",{className:\"grid-container narrow-grid\"},U(\"div\",{className:\"grid-100\"},U(\"h4\",null,\"JSON to CSV\"),U(\"h5\",null,'\"Last thing: what about converting JSON to CSV?\"'),U(\"p\",null,\"Use \",U(\"code\",null,\"jsonToCSV()\"),\" function, passing in your array of arrays or array of objects. react-papaparse will figure it out.\"),U(\"pre\",null,U(\"code\",{className:\"language-javascript\"},\"// Output is a properly-formatted CSV string.\\nconst csv = jsonToCSV(jsonData)\\n\")))))},L=t.a.createElement,A=function(){return L(\"section\",{id:\"download\"},L(\"div\",{className:\"grid-container\"},L(\"div\",{className:\"grid-100\"},L(\"h3\",null,\"Install\")),L(\"div\",{className:\"prefix-30 grid-40 suffix-30\"},L(\"b\",{style:{display:\"block\",textAlign:\"center\"}},\"npm\"),L(\"pre\",null,L(\"code\",{className:\"language-bash\"},\"$ npm install react-papaparse --save\")),L(\"br\",null),L(\"b\",{style:{display:\"block\",textAlign:\"center\"}},\"yarn\"),L(\"pre\",null,L(\"code\",{className:\"language-bash\"},\"$ yarn add react-papaparse\"))),L(\"div\",{className:\"clear\"}),L(\"div\",{className:\"grid-100 text-center\"},L(\"br\",null),L(\"br\",null),L(\"a\",{href:\"https://github.com/Bunlong/react-papaparse\",className:\"button\"},L(\"i\",{className:\"fa fa-github\"}),\"\\xa0 GitHub\"),L(\"a\",{href:\"/demo\",className:\"button red\"},L(\"i\",{className:\"fa fa-magic\"}),\"\\xa0 Demo\"),L(\"a\",{href:\"/docs\",className:\"button gray\"},L(\"i\",{className:\"fa fa-book\"}),\"\\xa0 Documentation\"))))},_=t.a.createElement;n.default=function(){return _(t.a.Fragment,null,_(o,null),_(\"main\",null,_(s,null),_(c,null),_(m,null),_(g,null),_(f,null),_(N,null),_(b,null),_(R,null),_(C,null),_(x,null),_(D,null),_(O,null),_(j,null),_(B,null),_(I,null),_(A,null)))}},vlRD:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/\",function(){return a(\"RNiq\")}])}},[[\"vlRD\",1,0]]]);","extractedComments":[]}