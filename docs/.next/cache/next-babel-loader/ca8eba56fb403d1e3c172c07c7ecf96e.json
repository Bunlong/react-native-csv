{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Error.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar Error = function Error() {\n  return __jsx(\"section\", {\n    id: \"errors\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-container narrow-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, \"Error Handling\"), __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"\\\"Aw, shoot. Errors.\\\"\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }, \"react-papaparse handles errors pretty well. The\", ' ', __jsx(\"a\", {\n    href: \"http://tools.ietf.org/html/rfc4180\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"CSV standard\"), \" is somewhat \", __jsx(\"strike\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 22\n    }\n  }, \"loose\"), \" ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing.\"), __jsx(\"pre\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, \"// Example error:\\n{\\n  type: 'FieldMismatch',\\n  code: 'TooManyFields',\\n  message: 'Expected 3 fields, but parsed 4',\\n  row: 1\\n}\")))));\n};\n\n_c = Error;\nexport default Error;\n\nvar _c;\n\n$RefreshReg$(_c, \"Error\");","map":{"version":3,"sources":["/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Error.js"],"names":["React","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,SACE;AAAS,IAAA,EAAE,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDACkD,GADlD,EAEE;AAAG,IAAA,IAAI,EAAC,oCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,mBAGW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHX,mHAHF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4IADF,CAVF,CADF,CADF,CADF;AA4BD,CA7BD;;KAAMA,K;AA+BN,eAAeA,KAAf","sourcesContent":["import React from 'react';\n\nconst Error = () => {\n  return (\n    <section id=\"errors\">\n      <div className=\"grid-container narrow-grid\">\n        <div className=\"grid-100\">\n          <h4>Error Handling</h4>\n          <h5>\"Aw, shoot. Errors.\"</h5>\n          <p>\n            react-papaparse handles errors pretty well. The{' '}\n            <a href=\"http://tools.ietf.org/html/rfc4180\">CSV standard</a> is\n            somewhat <strike>loose</strike> ambiguous, so react-papaparse is\n            designed for edge cases. For example, mismatched fields won't break\n            parsing.\n          </p>\n          <pre>\n            <code className=\"language-javascript\">\n              {`// Example error:\n{\n  type: 'FieldMismatch',\n  code: 'TooManyFields',\n  message: 'Expected 3 fields, but parsed 4',\n  row: 1\n}`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Error;\n"]},"metadata":{},"sourceType":"module"}