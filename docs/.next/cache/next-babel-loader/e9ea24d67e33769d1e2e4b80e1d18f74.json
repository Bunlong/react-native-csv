{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\n\nvar Result = function Result() {\n  return __jsx(\"section\", null, __jsx(\"div\", {\n    className: \"grid-container\"\n  }, __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h4\", {\n    id: \"results\"\n  }, \"The Parse Result Object\"), __jsx(\"p\", null, \"A parse result always contains three objects: data, errors, and meta. Data and errors are arrays, and meta is an object. In the step callback, the data array will only contain one element.\")), __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h5\", {\n    id: \"results-structure\"\n  }, \"Result Structure\")), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"pre\", null, __jsx(\"code\", {\n    className: \"language-javascript\"\n  }, \"{\\n  data:   // array of parsed data\\n  errors: // array of errors\\n  meta:   // object with extra info\\n}\"))), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"code\", null, \"data\"), \" is an array of rows. If header is false, rows are arrays; otherwise they are objects of data keyed by the field name.\"), __jsx(\"li\", null, __jsx(\"code\", null, \"errors\"), \" is an array of \", __jsx(\"a\", {\n    href: \"#errors\"\n  }, \"errors\"), \".\"), __jsx(\"li\", null, __jsx(\"code\", null, \"meta\"), \" contains extra information about the parse, such as delimiter used, the newline sequence, whether the process was aborted, etc. Properties in this object are not guaranteed to exist in all situations.\"))), __jsx(\"div\", {\n    className: \"clear\"\n  }), __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h5\", {\n    id: \"data\"\n  }, \"Data\")), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"pre\", null, __jsx(\"code\", {\n    className: \"language-javascript\"\n  }, \"// Example (header: false)\\n[\\n  [\\\"Column 1\\\", \\\"Column 2\\\"],\\n  [\\\"foo\\\", \\\"bar\\\"],\\n  [\\\"abc\\\", \\\"def\\\"]\\n]\\n\\n// Example (header: true)\\n[\\n  {\\n    \\\"Column 1\\\": \\\"foo\\\",\\n    \\\"Column 2\\\": \\\"bar\\\"\\n  },\\n  {\\n    \\\"Column 1\\\": \\\"abc\\\",\\n    \\\"Column 2\\\": \\\"def\\\"\\n  }\\n]\"))), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"If header row is enabled and more fields are found on a row of data than in the header row, an extra field will appear in that row called \", __jsx(\"code\", null, \"__parsed_extra\"), \". It contains an array of all data parsed from that row that extended beyond the header row.\"))), __jsx(\"div\", {\n    className: \"clear\"\n  }), __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h5\", {\n    id: \"errors\"\n  }, \"Errors\")), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"pre\", null, __jsx(\"code\", {\n    className: \"language-javascript\"\n  }, \"// Error structure\\n{\\n  type: \\\"\\\",     // A generalization of the error\\n  code: \\\"\\\",     // Standardized error code\\n  message: \\\"\\\",  // Human-readable details\\n  row: 0,       // Row index of parsed data where error is\\n}\"))), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"The error \", __jsx(\"code\", null, \"type\"), \" will be one of \\\"Quotes\\\", \\\"Delimiter\\\", or \\\"FieldMismatch\\\".\"), __jsx(\"li\", null, \"The \", __jsx(\"code\", null, \"code\"), \" may be \\\"MissingQuotes\\\", \\\"UndetectableDelimiter\\\", \\\"TooFewFields\\\", or \\\"TooManyFields\\\" (depending on the error type).\"), __jsx(\"li\", null, \"Just because errors are generated does not necessarily mean that parsing failed. The worst error you can get is probably MissingQuotes.\"))), __jsx(\"div\", {\n    className: \"clear\"\n  }), __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h5\", {\n    id: \"meta\"\n  }, \"Meta\")), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"pre\", null, __jsx(\"code\", {\n    className: \"language-javascript\"\n  }, \"{\\n  delimiter: // Delimiter used\\n  linebreak: // Line break sequence used\\n  aborted:   // Whether process was aborted\\n  fields:    // Array of field names\\n  truncated: // Whether preview consumed all input\\n}\"))), __jsx(\"div\", {\n    className: \"grid-50\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"Not all meta properties will always be available. For instance, \", __jsx(\"code\", null, \"fields\"), \" is only given when header row is enabled.\"))), __jsx(\"div\", {\n    className: \"clear\"\n  })));\n};\n\nexport default Result;","map":null,"metadata":{},"sourceType":"module"}