{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Stream.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar Stream = function Stream() {\n  return __jsx(\"section\", {\n    id: \"stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-container narrow-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, \"Streaming\"), __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"\\\"Did I mention the file is huge?\\\"\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }, \"That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser.\"), __jsx(\"pre\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"readRemoteFile('http://example.com/big.csv', {\\n  step: (row) => {\\n    console.log('Row:', row.data)\\n  },\\n  complete: () => {\\n    console.log('All done!')\\n  }\\n})\")))));\n};\n\n_c = Stream;\nexport default Stream;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stream\");","map":{"version":3,"sources":["/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Stream.js"],"names":["React","Stream"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,SACE;AAAS,IAAA,EAAE,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2KAHF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+KADF,CARF,CADF,CADF,CADF;AA2BD,CA5BD;;KAAMA,M;AA8BN,eAAeA,MAAf","sourcesContent":["import React from 'react';\n\nconst Stream = () => {\n  return (\n    <section id=\"stream\">\n      <div className=\"grid-container narrow-grid\">\n        <div className=\"grid-100\">\n          <h4>Streaming</h4>\n          <h5>\"Did I mention the file is huge?\"</h5>\n          <p>\n            That's what streaming is for. Specify a step callback to receive the\n            results row-by-row. This way, you won't load the whole file into\n            memory and crash the browser.\n          </p>\n          <pre>\n            <code className=\"language-javascript\">\n              {`readRemoteFile('http://example.com/big.csv', {\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Stream;\n"]},"metadata":{},"sourceType":"module"}