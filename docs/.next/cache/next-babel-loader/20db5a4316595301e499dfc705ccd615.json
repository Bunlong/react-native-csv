{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\n\nvar Error = function Error() {\n  return __jsx(\"section\", {\n    id: \"errors\"\n  }, __jsx(\"div\", {\n    className: \"grid-container narrow-grid\"\n  }, __jsx(\"div\", {\n    className: \"grid-100\"\n  }, __jsx(\"h4\", null, \"Error Handling\"), __jsx(\"h5\", null, \"\\\"Aw, shoot. Errors.\\\"\"), __jsx(\"p\", null, \"react-papaparse handles errors pretty well. The \", __jsx(\"a\", {\n    href: \"http://tools.ietf.org/html/rfc4180\"\n  }, \"CSV standard\"), \" is somewhat \", __jsx(\"strike\", null, \"loose\"), \" ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing.\"), __jsx(\"pre\", null, __jsx(\"code\", {\n    className: \"language-javascript\"\n  }, \"// Example error:\\n{\\n  type: 'FieldMismatch',\\n  code: 'TooManyFields',\\n  message: 'Expected 3 fields, but parsed 4',\\n  row: 1\\n}\")))));\n};\n\nexport default Error;","map":null,"metadata":{},"sourceType":"module"}