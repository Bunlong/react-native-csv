{"ast":null,"code":"var _jsxFileName = \"/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Worker.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nconst Worker = () => {\n  return __jsx(\"section\", {\n    id: \"worker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-container narrow-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, \"Multi-Threading\"), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"'Lovely. Now my web page locked up.'\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }, \"That happens when a long-running script is executing in the same thread as the page. Use a\", ' ', __jsx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API/Worker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, \"Worker\"), ' ', \"thread by specifying \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 34\n    }\n  }, \"worker: true\"), \". It may take slightly longer, but your page will stay reactive.\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, `readRemoteFile(bigFileURL, {\n  worker: true,\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n})`)))));\n};\n\nexport default Worker;","map":{"version":3,"sources":["/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Worker.js"],"names":["React","Worker"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,SACE;AAAS,IAAA,EAAE,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAE4B,GAF5B,EAGE;AAAG,IAAA,IAAI,EAAC,yDAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAKO,GALP,2BAMuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANvB,qEAHF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;;;;;;;;GADJ,CADF,CAZF,CADF,CADF,CADF;AAgCD,CAjCD;;AAmCA,eAAeA,MAAf","sourcesContent":["import React from 'react';\n\nconst Worker = () => {\n  return (\n    <section id=\"worker\">\n      <div className=\"grid-container narrow-grid\">\n        <div className=\"grid-100\">\n          <h4>Multi-Threading</h4>\n          <h5>'Lovely. Now my web page locked up.'</h5>\n          <p>\n            That happens when a long-running script is executing in the same\n            thread as the page. Use a{' '}\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\">\n              Worker\n            </a>{' '}\n            thread by specifying <code>worker: true</code>. It may take slightly\n            longer, but your page will stay reactive.\n          </p>\n          <pre>\n            <code className=\"language-javascript\">\n              {`readRemoteFile(bigFileURL, {\n  worker: true,\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Worker;\n"]},"metadata":{},"sourceType":"module"}