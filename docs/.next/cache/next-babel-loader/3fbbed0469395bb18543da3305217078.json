{"ast":null,"code":"var _jsxFileName = \"/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/docs/Config.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nconst Config = () => {\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    id: \"config\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, \"The Parse Config Object\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"The \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }, \"readString\"), \" function and \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 54\n    }\n  }, \"CSVReader\"), ' ', \"component may be passed a configuration object. It defines settings, behavior, and callbacks used during parsing. Any properties left unspecified will resort to their default values.\"), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, \"Warning\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, \"Setting the \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 25\n    }\n  }, \"complete\"), \" callback function on the config object will disable the \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 37\n    }\n  }, \"onDrop\"), \" and/or\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, \"onFileLoad\"), \" functions you pass to the\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"CSVReader\"), \" component.\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \"Setting the \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 25\n    }\n  }, \"step\"), \" callback function on the config object will disable the \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 30\n    }\n  }, \"onDrop\"), \" and/or \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 57\n    }\n  }, \"onFileLoad\"), ' ', \"functions you pass to the \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 39\n    }\n  }, \"CSVReader\"), \" component and will disable the progress bar.\")), __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, __jsx(\"h5\", {\n    id: \"config-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, \"Default Config With All Options\")), __jsx(\"div\", {\n    className: \"prefix-25 grid-50 suffix-25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, `{\n  delimiter: \"\",  // auto-detect\n  newline: \"\",  // auto-detect\n  quoteChar: '\"',\n  escapeChar: '\"',\n  header: false,\n  transformHeader: undefined,\n  dynamicTyping: false,\n  preview: 0,\n  encoding: \"\",\n  worker: false,\n  comments: false,\n  step: undefined,\n  complete: undefined,\n  error: undefined,\n  download: false,\n  downloadRequestHeaders: undefined,\n  skipEmptyLines: false,\n  chunk: undefined,\n  fastMode: undefined,\n  beforeFirstChunk: undefined,\n  withCredentials: undefined,\n  transform: undefined,\n  delimitersToGuess: [',', '\\t', '|', ';',`, ' ', __jsx(\"a\", {\n    href: \"#readonly\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"RECORD_SEP\"), \",\", ' ', __jsx(\"a\", {\n    href: \"#readonly\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, \"UNIT_SEP\"), `]\n}`))), __jsx(\"div\", {\n    className: \"clear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(\"h5\", {\n    id: \"config-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Config\")), __jsx(\"div\", {\n    className: \"grid-100\",\n    style: {\n      overflowX: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, __jsx(\"th\", {\n    style: {\n      width: '20%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Option\"), __jsx(\"th\", {\n    style: {\n      width: '80%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Explanation\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, \"delimiter\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"The delimiting character. Leave blank to auto-detect from a list of most common delimiters, or any values passed in through \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 27\n    }\n  }, \"delimitersToGuess\"), \". It can be a string or a function. If string, it must be one of length 1. If a function, it must accept the input as first parameter and it must return a string which will be used as delimiter. In both cases it cannot be found in\", ' ', __jsx(\"a\", {\n    href: \"#readonly\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }\n  }, \"BAD_DELIMITERS\"), \".\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, \"newline\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"The newline sequence. Leave blank to auto-detect. Must be one of \\\\r, \\\\n, or \\\\r\\\\n.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }, \"quoteChar\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"The character used to quote fields. The quoting of all fields is not mandatory. Any field which is not quoted will correctly read.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }\n  }, \"escapeChar\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"The character used to escape the quote character within a field. If not set, this option will default to the value of\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, \"quoteChar\"), \", meaning that the default escaping of quote character within a quoted field is using the quote character two times. (e.g.\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, \"\\\"column with \\\"\\\"quotes\\\"\\\" in text\\\"\"), \")\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, \"header\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"If true, the first row of parsed data will be interpreted as field names. An array of field names will be returned in\", ' ', __jsx(\"a\", {\n    href: \"#meta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, \"meta\"), \", and each row of data will be an object of values keyed by field name instead of a simple array. Rows with a different number of fields from the header row will produce an error. Warning: Duplicate field names will overwrite values in previous fields having the same name.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }, \"transformHeader\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"A function to apply on each header. Requires\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, \"header\"), \" to be \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 45\n    }\n  }, \"true\"), \". The function receives the header as its first argument.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, \"dynamicTyping\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"If true, numeric and boolean data will be converted to their type instead of remaining strings. Numeric data must conform to the definition of a decimal literal. Numerical values greater than \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 32\n    }\n  }, \"2^53\"), \" or less than \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 63\n    }\n  }, \"-2^53\"), ' ', \"will not be converted to numbers to preserve precision. European-formatted numbers must have commas and dots swapped. If also accepts an object or a function. If object it's values should be a boolean to indicate if dynamic typing should be applied for each column number (or header name if using headers). If it's a function, it should return a boolean value for each field number (or name if using headers) which will be passed as first argument.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, \"preview\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"If > 0, only that many rows will be parsed.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  }, \"encoding\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, \"The encoding to use when opening local files. If specified, it must be a value supported by the FileReader API.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 19\n    }\n  }, \"worker\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \"Whether or not to use a worker thread. Using a worker will keep your page reactive, but may be slightly slower.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  }, \"comments\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, \"A string that indicates a comment (for example, \\\"#\\\" or \\\"//\\\"). When react-papaparse encounters a line starting with this string, it will skip the line.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }, \"step\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, \"To \", __jsx(\"a\", {\n    href: \"/faq#streaming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 22\n    }\n  }, \"stream\"), \" the input, define a callback function:\", __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 19\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, \"step: (\", __jsx(\"a\", {\n    href: \"#results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 30\n    }\n  }, \"results\"), `, parser) => {\n  console.log(\"Row data:\", results.data)\n  console.log(\"Row errors:\", results.errors)\n}`)), \"Streaming is necessary for large files which would otherwise crash the browser. You can call \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 51\n    }\n  }, \"parser.abort()\"), \" to abort parsing. And, except when using a\", ' ', __jsx(\"a\", {\n    href: \"/faq#worker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 19\n    }\n  }, \"Web Worker\"), \", you can call\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 19\n    }\n  }, \"parser.pause()\"), \" to pause it, and\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 19\n    }\n  }, \"parser.resume()\"), \" to resume.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, \"complete\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, \"The callback to execute when parsing is complete. It receives the parse \", __jsx(\"a\", {\n    href: \"#results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 29\n    }\n  }, \"results\"), \". If parsing a local file, the\", ' ', __jsx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API/File\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 19\n    }\n  }, \"File\"), ' ', \"is passed in, too:\", __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }\n  }, `complete: (results, file) => {\n  console.log(\"Parsing complete:\", results, file)\n}`)), \"When streaming, parse results are \", __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 53\n    }\n  }, \"not\"), \" available in this callback.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 19\n    }\n  }, \"error\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, \"A callback to execute if FileReader encounters an error. The function is passed two arguments: the error and the File.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 19\n    }\n  }, \"downloadRequestHeaders\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }\n  }, \"If defined, should be an object that describes the headers, example:\", __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 19\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }, `downloadRequestHeaders: {\n  'Authorization': 'token 123345678901234567890',\n}`)))), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }, \"skipEmptyLines\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, \"If true, lines that are completely empty (those which evaluate to an empty string) will be skipped. If set to\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 19\n    }\n  }, \"'greedy'\"), \", lines that don't have any content (those which have only whitespace after parsing) will also be skipped.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  }, \"chunk\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, \"A callback function, identical to step, which activates streaming. However, this function is executed after every\", ' ', __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }, \"chunk\"), \" of the file is loaded and parsed rather than every row. Works only with local and remote files. Do not use both chunk and step callbacks together. For the function signature, see the documentation for the step function.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 19\n    }\n  }, \"fastMode\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }\n  }, \"Fast mode speeds up parsing significantly for large inputs. However, it only works when the input has no quoted fields. Fast mode will automatically be enabled if no \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 65\n    }\n  }, \"\\\"\"), ' ', \"characters appear in the input. You can force fast mode either way by setting it to \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 40\n    }\n  }, \"true\"), \" or \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 61\n    }\n  }, \"false\"), \".\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 19\n    }\n  }, \"beforeFirstChunk\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 17\n    }\n  }, \"A function to execute before parsing the first chunk. Can be used with chunk or step streaming modes. The function receives as an argument the chunk about to be parsed, and it may return a modified chunk to parse. This is useful for stripping header lines (as long as the header fits in a single chunk).\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }, \"withCredentials\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }\n  }, \"A boolean value passed directly into XMLHttpRequest's \\\"withCredentials\\\" property.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, \"transform\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 17\n    }\n  }, \"A function to apply on each value. The function receives the value as its first argument and the column number or header name when enabled as its second argument. The return value of the function will replace the value it received. The transform function is applied before dynamicTyping.\")), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 19\n    }\n  }, \"delimitersToGuess\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 17\n    }\n  }, \"An array of delimiters to guess from if the\", ' ', __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 19\n    }\n  }, \"delimiter\"), \" option is not set.\")))))));\n};\n\nexport default Config;","map":{"version":3,"sources":["/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/docs/Config.js"],"names":["React","Config","overflowX","width"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Config = () => {\n  return (\n    <section>\n      <div className=\"grid-container\">\n        <div className=\"grid-100\">\n          <h4 id=\"config\">The Parse Config Object</h4>\n          <p>\n            The <code>readString</code> function and <code>CSVReader</code>{' '}\n            component may be passed a configuration object. It defines settings,\n            behavior, and callbacks used during parsing. Any properties left\n            unspecified will resort to their default values.\n          </p>\n          <h5>Warning</h5>\n          <p>\n            Setting the <code>complete</code> callback function on the config\n            object will disable the <code>onDrop</code> and/or{' '}\n            <code>onFileLoad</code> functions you pass to the{' '}\n            <code>CSVReader</code> component.\n          </p>\n          <p>\n            Setting the <code>step</code> callback function on the config object\n            will disable the <code>onDrop</code> and/or <code>onFileLoad</code>{' '}\n            functions you pass to the <code>CSVReader</code> component and will\n            disable the progress bar.\n          </p>\n        </div>\n\n        <div className=\"grid-100\">\n          <h5 id=\"config-default\">Default Config With All Options</h5>\n        </div>\n\n        <div className=\"prefix-25 grid-50 suffix-25\">\n          <pre>\n            <code className=\"language-javascript\">\n              {`{\n  delimiter: \"\",  // auto-detect\n  newline: \"\",  // auto-detect\n  quoteChar: '\"',\n  escapeChar: '\"',\n  header: false,\n  transformHeader: undefined,\n  dynamicTyping: false,\n  preview: 0,\n  encoding: \"\",\n  worker: false,\n  comments: false,\n  step: undefined,\n  complete: undefined,\n  error: undefined,\n  download: false,\n  downloadRequestHeaders: undefined,\n  skipEmptyLines: false,\n  chunk: undefined,\n  fastMode: undefined,\n  beforeFirstChunk: undefined,\n  withCredentials: undefined,\n  transform: undefined,\n  delimitersToGuess: [',', '\\t', '|', ';',`}{' '}\n              <a href=\"#readonly\">RECORD_SEP</a>,{' '}\n              <a href=\"#readonly\">UNIT_SEP</a>\n              {`]\n}`}\n            </code>\n          </pre>\n        </div>\n\n        <div className=\"clear\" />\n\n        <div className=\"grid-100\">\n          <h5 id=\"config-details\">Config</h5>\n        </div>\n\n        <div className=\"grid-100\" style={{ overflowX: 'auto' }}>\n          <table>\n            <thead>\n              <tr>\n                <th style={{ width: '20%' }}>Option</th>\n                <th style={{ width: '80%' }}>Explanation</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <code>delimiter</code>\n                </td>\n                <td>\n                  The delimiting character. Leave blank to auto-detect from a\n                  list of most common delimiters, or any values passed in\n                  through <code>delimitersToGuess</code>. It can be a string or\n                  a function. If string, it must be one of length 1. If a\n                  function, it must accept the input as first parameter and it\n                  must return a string which will be used as delimiter. In both\n                  cases it cannot be found in{' '}\n                  <a href=\"#readonly\">BAD_DELIMITERS</a>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>newline</code>\n                </td>\n                <td>\n                  The newline sequence. Leave blank to auto-detect. Must be one\n                  of \\r, \\n, or \\r\\n.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>quoteChar</code>\n                </td>\n                <td>\n                  The character used to quote fields. The quoting of all fields\n                  is not mandatory. Any field which is not quoted will correctly\n                  read.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>escapeChar</code>\n                </td>\n                <td>\n                  The character used to escape the quote character within a\n                  field. If not set, this option will default to the value of{' '}\n                  <code>quoteChar</code>, meaning that the default escaping of\n                  quote character within a quoted field is using the quote\n                  character two times. (e.g.{' '}\n                  <code>\"column with \"\"quotes\"\" in text\"</code>)\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>header</code>\n                </td>\n                <td>\n                  If true, the first row of parsed data will be interpreted as\n                  field names. An array of field names will be returned in{' '}\n                  <a href=\"#meta\">meta</a>, and each row of data will be an\n                  object of values keyed by field name instead of a simple\n                  array. Rows with a different number of fields from the header\n                  row will produce an error. Warning: Duplicate field names will\n                  overwrite values in previous fields having the same name.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>transformHeader</code>\n                </td>\n                <td>\n                  A function to apply on each header. Requires{' '}\n                  <code>header</code> to be <code>true</code>. The function\n                  receives the header as its first argument.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>dynamicTyping</code>\n                </td>\n                <td>\n                  If true, numeric and boolean data will be converted to their\n                  type instead of remaining strings. Numeric data must conform\n                  to the definition of a decimal literal. Numerical values\n                  greater than <code>2^53</code> or less than <code>-2^53</code>{' '}\n                  will not be converted to numbers to preserve precision.\n                  European-formatted numbers must have commas and dots swapped.\n                  If also accepts an object or a function. If object it's values\n                  should be a boolean to indicate if dynamic typing should be\n                  applied for each column number (or header name if using\n                  headers). If it's a function, it should return a boolean value\n                  for each field number (or name if using headers) which will be\n                  passed as first argument.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>preview</code>\n                </td>\n                <td>If &gt; 0, only that many rows will be parsed.</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>encoding</code>\n                </td>\n                <td>\n                  The encoding to use when opening local files. If specified, it\n                  must be a value supported by the FileReader API.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>worker</code>\n                </td>\n                <td>\n                  Whether or not to use a worker thread. Using a worker will\n                  keep your page reactive, but may be slightly slower.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>comments</code>\n                </td>\n                <td>\n                  A string that indicates a comment (for example, \"#\" or \"//\").\n                  When react-papaparse encounters a line starting with this\n                  string, it will skip the line.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>step</code>\n                </td>\n                <td>\n                  To <a href=\"/faq#streaming\">stream</a> the input, define a\n                  callback function:\n                  <pre>\n                    <code className=\"language-javascript\">\n                      step: (<a href=\"#results\">results</a>\n                      {`, parser) => {\n  console.log(\"Row data:\", results.data)\n  console.log(\"Row errors:\", results.errors)\n}`}\n                    </code>\n                  </pre>\n                  Streaming is necessary for large files which would otherwise\n                  crash the browser. You can call <code>parser.abort()</code> to\n                  abort parsing. And, except when using a{' '}\n                  <a href=\"/faq#worker\">Web Worker</a>, you can call{' '}\n                  <code>parser.pause()</code> to pause it, and{' '}\n                  <code>parser.resume()</code> to resume.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>complete</code>\n                </td>\n                <td>\n                  The callback to execute when parsing is complete. It receives\n                  the parse <a href=\"#results\">results</a>. If parsing a local\n                  file, the{' '}\n                  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\">\n                    File\n                  </a>{' '}\n                  is passed in, too:\n                  <pre>\n                    <code className=\"language-javascript\">\n                      {`complete: (results, file) => {\n  console.log(\"Parsing complete:\", results, file)\n}`}\n                    </code>\n                  </pre>\n                  When streaming, parse results are <i>not</i> available in this\n                  callback.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>error</code>\n                </td>\n                <td>\n                  A callback to execute if FileReader encounters an error. The\n                  function is passed two arguments: the error and the File.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>downloadRequestHeaders</code>\n                </td>\n                <td>\n                  If defined, should be an object that describes the headers,\n                  example:\n                  <pre>\n                    <code className=\"language-javascript\">\n                      {`downloadRequestHeaders: {\n  'Authorization': 'token 123345678901234567890',\n}`}\n                    </code>\n                  </pre>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>skipEmptyLines</code>\n                </td>\n                <td>\n                  If true, lines that are completely empty (those which evaluate\n                  to an empty string) will be skipped. If set to{' '}\n                  <code>'greedy'</code>, lines that don't have any content\n                  (those which have only whitespace after parsing) will also be\n                  skipped.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>chunk</code>\n                </td>\n                <td>\n                  A callback function, identical to step, which activates\n                  streaming. However, this function is executed after every{' '}\n                  <i>chunk</i> of the file is loaded and parsed rather than\n                  every row. Works only with local and remote files. Do not use\n                  both chunk and step callbacks together. For the function\n                  signature, see the documentation for the step function.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>fastMode</code>\n                </td>\n                <td>\n                  Fast mode speeds up parsing significantly for large inputs.\n                  However, it only works when the input has no quoted fields.\n                  Fast mode will automatically be enabled if no <code>\"</code>{' '}\n                  characters appear in the input. You can force fast mode either\n                  way by setting it to <code>true</code> or <code>false</code>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>beforeFirstChunk</code>\n                </td>\n                <td>\n                  A function to execute before parsing the first chunk. Can be\n                  used with chunk or step streaming modes. The function receives\n                  as an argument the chunk about to be parsed, and it may return\n                  a modified chunk to parse. This is useful for stripping header\n                  lines (as long as the header fits in a single chunk).\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>withCredentials</code>\n                </td>\n                <td>\n                  A boolean value passed directly into XMLHttpRequest's\n                  \"withCredentials\" property.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>transform</code>\n                </td>\n                <td>\n                  A function to apply on each value. The function receives the\n                  value as its first argument and the column number or header\n                  name when enabled as its second argument. The return value of\n                  the function will replace the value it received. The transform\n                  function is applied before dynamicTyping.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>delimitersToGuess</code>\n                </td>\n                <td>\n                  An array of delimiters to guess from if the{' '}\n                  <code>delimiter</code> option is not set.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Config;\n"]},"metadata":{},"sourceType":"module"}