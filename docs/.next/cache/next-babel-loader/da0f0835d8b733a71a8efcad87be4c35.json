{"ast":null,"code":"var _jsxFileName = \"/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Unparse.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nconst Unparse = () => {\n  return __jsx(\"section\", {\n    id: \"unparse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-container narrow-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, \"JSON to CSV\"), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"\\\"Last thing: what about converting JSON to CSV?\\\"\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }, \"Use \", __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, \"jsonToCSV()\"), \" function, passing in your array of arrays or array of objects. react-papaparse will figure it out.\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, __jsx(\"code\", {\n    className: \"language-javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, `// Output is a properly-formatted CSV string.\nconst csv = jsonToCSV(jsonData)\n`)))));\n};\n\nexport default Unparse;","map":{"version":3,"sources":["/home/bunlong/workspace/os/react-papaparse/docs/src/components/screens/indexes/Unparse.js"],"names":["React","Unparse"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,SACE;AAAS,IAAA,EAAE,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADN,wGAHF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAChB;AACA,CAHY,CADF,CAPF,CADF,CADF,CADF;AAqBD,CAtBD;;AAwBA,eAAeA,OAAf","sourcesContent":["import React from 'react';\n\nconst Unparse = () => {\n  return (\n    <section id=\"unparse\">\n      <div className=\"grid-container narrow-grid\">\n        <div className=\"grid-100\">\n          <h4>JSON to CSV</h4>\n          <h5>\"Last thing: what about converting JSON to CSV?\"</h5>\n          <p>\n            Use <code>jsonToCSV()</code> function, passing in your array of\n            arrays or array of objects. react-papaparse will figure it out.\n          </p>\n          <pre>\n            <code className=\"language-javascript\">\n              {`// Output is a properly-formatted CSV string.\nconst csv = jsonToCSV(jsonData)\n`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Unparse;\n"]},"metadata":{},"sourceType":"module"}