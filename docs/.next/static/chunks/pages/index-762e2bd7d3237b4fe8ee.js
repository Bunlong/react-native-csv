_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[7],{Qetd:function(e,a,n){"use strict";var t=Object.assign.bind(Object);e.exports=t,e.exports.default=e.exports},RNiq:function(e,a,n){"use strict";n.r(a);var t=n("q1tI"),r=n.n(t),l=r.a.createElement,i=function(){return l("div",{id:"skrollr-body"},l("div",{id:"top","data-top":"bottom: 0px; opacity: 1;","data-top-bottom":"bottom: -350px; opacity: .3;"},l("div",{className:"grid-container"},l("div",{className:"grid-100"},l("div",{id:"title-main"},l("h1",null,"react-native-csv"),l("h2",null,"The powerful, React Native CSV parser for big boys and girls"),l("a",{href:"#download",className:"button"},l("i",{className:"fa fa-download"}),"\xa0 Install"),l("a",{href:"/docs",className:"button gray"},l("i",{className:"fa fa-book"}),"\xa0 Documentation")),l("div",{id:"title-code"},l("pre",null,l("code",{className:"language-javascript"},"// Parse CSV string\nconst data = readString(csvString)\n\n// Convert back to CSV\nconst csv = jsonToCSV(jsonData)\n\n// Stream big file in worker thread\nreadRemoteFile(bigFileURL, {\n  worker: true,\n  step: (results) => {\n    console.log('Row:', results.data)\n  }\n})")))))))},s=r.a.createElement,o=function(){return s(r.a.Fragment,null,s("header",null,s("div",{className:"grid-container"},s("div",{className:"grid-40 mobile-grid-50"},s("div",{className:"links"},s("a",{href:"/docs"},s("i",{className:"fa fa-book fa-lg"})," Docs"))),s("div",{className:"grid-20 hide-on-mobile text-center"},s("a",{href:"/",className:"text-logo"},"react-native-csv 0.2")),s("div",{className:"grid-40 mobile-grid-50 text-right"},s("div",{className:"links"},s("a",{href:"https://github.com/Bunlong/react-native-csv"},s("i",{className:"fa fa-github fa-lg"})," GitHub"))))),s("div",{className:"insignia"},s("div",{className:"firefox-hack"},s("div",{id:"version-intro"},"Version"),s("div",{id:"version"},"0.2"))))},c=r.a.createElement,d=function(){return c("section",{style:{paddingTop:0}},c("div",{className:"grid-container"},c("div",{className:"grid-100"},c("h3",null,"Features"))),c("div",{id:"ticker"},c("div",{className:"ticker-item current"},c("p",null,"Now the fastest CSV parser for React Native")),c("div",{className:"ticker-item"},c("p",null,"The world's first multi-threaded CSV parser for React Native")),c("div",{className:"ticker-item"},c("p",null,"react-native-csv can handle files gigabytes in size without crashing")),c("div",{className:"ticker-item"},c("p",null,"Use react-native-csv when performance, privacy, and correctness matter to you")),c("div",{className:"ticker-item"},c("p",null,"react-native-csv alleviates privacy concerns related to uploading files")),c("div",{className:"ticker-item"},c("p",null,"Malformed CSV is handled gracefully with a detailed error report"))),c("div",{className:"grid-container"},c("div",{className:"grid-33"},c("li",null,"CSV\u2192JSON and ",c("a",{href:"#unparse"},"JSON\u2192CSV")),c("li",null,"Auto-detect ",c("a",{href:"#delimiter"},"delimiter")),c("li",null,c("a",{href:"#local-files"},"Open local files")),c("li",null,c("a",{href:"#remote-files"},"Download remote files"))),c("div",{className:"grid-33"},c("li",null,c("a",{href:"#stream"},"Stream")," local and remote files"),c("li",null,c("a",{href:"#worker"},"Multi-threaded")),c("li",null,c("a",{href:"#header"},"Header row")," support"),c("li",null,c("a",{href:"#type-conversion"},"Type conversion"))),c("div",{className:"grid-33"},c("li",null,"Skip ",c("a",{href:"#comments"},"commented lines")),c("li",null,"Fast mode"),c("li",null,"Graceful ",c("a",{href:"#errors"},"error")," handling"),c("li",null,"Easy to use")),c("div",{className:"clear"}),c("br",null),c("br",null),c("div",{className:"grid-100 text-center"},c("a",{href:"https://github.com/Bunlong/react-native-csv",className:"button"},c("i",{className:"fa fa-github"}),"\xa0 GitHub"),c("a",{href:"/docs",className:"button gray"},c("i",{className:"fa fa-book"}),"\xa0 Documentation"))))},u=(r.a.createElement,r.a.createElement),m=function(){return u("section",null,u("div",{className:"grid-container"},u("div",{className:"grid-100 text-center"},u("h3",null,"People ",u("i",{className:"fa fa-heart"})," react-native-csv"),u("p",null,u("a",{href:"https://www.npmjs.com/package/react-native-csv"},u("img",{src:"https://img.shields.io/npm/dm/react-papaparse.svg",alt:"react-papaparse"}))))))},g=r.a.createElement,p=function(){return g("section",{id:"parse"},g("div",{className:"grid-container narrow-grid"},g("div",{className:"grid-100"},g("h4",null,"CSV Parsing"),g("h5",null,"\"Isn't parsing CSV just ",g("code",null,"String.split(',')"),'?"'),g("p",null,"react-native-csv does it right. Just pass in the CSV string with an optional ",g("a",{href:"/docs#config"},"configuration"),"."),g("pre",null,g("code",{className:"language-javascript"},"import { readString } from 'react-native-csv'\n\nconst results = readString(csvString, config)\n\n/*\nresults = {\n  data: [ ... ],    // parsed data\n  errors: [ ... ],  // errors encountered\n  meta: { ... }     // extra parse info\n}\n*/")))))},v=r.a.createElement,h=function(){return v("section",{id:"delimiter"},v("div",{className:"grid-container narrow-grid"},v("div",{className:"grid-100"},v("h4",null,"Delimiter Detection"),v("h5",null,'"But I don\'t know the delimiter..."'),v("p",null,"That's okay. react-native-csv will scan the first few rows to find the right delimiter."),v("pre",null,v("code",{className:"language-javascript"},"import { readString } from 'react-native-csv'\n\nconst results = readString(csvString)\n\nconsole.log(results.meta.delimiter)\n\n",v("span",null,String.fromCharCode(47),String.fromCharCode(47),' "',String.fromCharCode(92),'t"'))))))},f=(r.a.createElement,r.a.createElement),N=function(){return f("section",{id:"remote-files"},f("div",{className:"grid-container narrow-grid"},f("div",{className:"grid-100"},f("h4",null,"Remote Files"),f("h5",null,'"No \u2014 I mean, the file isn\'t on my computer."'),f("p",null,"Oh, well then just pass in the URL and \u2014 of course \u2014 a callback."),f("pre",null,f("code",{className:"language-javascript"},"readRemoteFile('http://example.com/file.csv', {\n  download: true,\n  complete: (results) => {\n    console.log(results)\n  }\n})")))))},w=r.a.createElement,b=function(){return w("section",{id:"stream"},w("div",{className:"grid-container narrow-grid"},w("div",{className:"grid-100"},w("h4",null,"Streaming"),w("h5",null,'"Did I mention the file is huge?"'),w("p",null,"That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser."),w("pre",null,w("code",{className:"language-javascript"},"readRemoteFile('http://example.com/big.csv', {\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n})")))))},y=r.a.createElement,S=function(){return y("section",{id:"worker"},y("div",{className:"grid-container narrow-grid"},y("div",{className:"grid-100"},y("h4",null,"Multi-Threading"),y("h5",null,"'Lovely. Now my web page locked up.'"),y("p",null,"That happens when a long-running script is executing in the same thread as the page. Use a"," ",y("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Worker"},"Worker")," ","thread by specifying ",y("code",null,"worker: true"),". It may take slightly longer, but your page will stay reactive."),y("pre",null,y("code",{className:"language-javascript"},"readRemoteFile(bigFileURL, {\n  worker: true,\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n})")))))},k=r.a.createElement,C=function(){return k("section",{id:"header"},k("div",{className:"grid-container narrow-grid"},k("div",{className:"grid-100"},k("h4",null,"Header Row"),k("h5",null,'"Great! Now I want data keyed by field name."'),k("p",null,"If you tell react-native-csv there is a header row, each row will be organized by field name instead of index."),k("pre",null,k("code",{className:"language-javascript"},"// Key data by field name instead of index/position\nconst results = readString(csvString {\n  header: true\n})")))))},E=r.a.createElement,x=function(){return E("section",{id:"type-conversion"},E("div",{className:"grid-container narrow-grid"},E("div",{className:"grid-100"},E("h4",null,"Type Conversion"),E("h5",null,'"Hey, these numbers are parsed as strings."'),E("p",null,E("i",null,"Everything")," is parsed as strings. If you want numbers and booleans, you can enable dynamic typing to do the conversion for you."),E("pre",null,E("code",{className:"language-javascript"},"// Converts numeric/boolean data\nconst results = readString(csvString {\n  dynamicTyping: true\n})")))))},j=r.a.createElement,V=function(){return j("section",{id:"comments"},j("div",{className:"grid-container narrow-grid"},j("div",{className:"grid-100"},j("h4",null,"Comments"),j("h5",null,'"I forgot to mention: my CSV files have comments in them."'),j("p",null,"Okay, first off: that's really weird. But fortunately, you can skip those lines... just specify the comment string."),j("pre",null,j("code",{className:"language-javascript"},"// Mostly found in academia, some CSV files\n// may have commented lines in them\nconst results = readString(csvString {\n  comments: '#'\n})")))))},R=r.a.createElement,T=function(){return R("section",{id:"errors"},R("div",{className:"grid-container narrow-grid"},R("div",{className:"grid-100"},R("h4",null,"Error Handling"),R("h5",null,'"Aw, shoot. Errors."'),R("p",null,"react-native-csv handles errors pretty well. The"," ",R("a",{href:"http://tools.ietf.org/html/rfc4180"},"CSV standard")," is somewhat ",R("strike",null,"loose")," ambiguous, so react-native-csv is designed for edge cases. For example, mismatched fields won't break parsing."),R("pre",null,R("code",{className:"language-javascript"},"// Example error:\n{\n  type: 'FieldMismatch',\n  code: 'TooManyFields',\n  message: 'Expected 3 fields, but parsed 4',\n  row: 1\n}")))))},F=r.a.createElement,I=function(){return F("section",{id:"unparse"},F("div",{className:"grid-container narrow-grid"},F("div",{className:"grid-100"},F("h4",null,"JSON to CSV"),F("h5",null,'"Last thing: what about converting JSON to CSV?"'),F("p",null,"Use ",F("code",null,"jsonToCSV()")," function, passing in your array of arrays or array of objects. react-native-csv will figure it out."),F("pre",null,F("code",{className:"language-javascript"},"// Output is a properly-formatted CSV string.\nconst csv = jsonToCSV(jsonData)\n")))))},D=r.a.createElement,_=function(){return D("section",{id:"download"},D("div",{className:"grid-container"},D("div",{className:"grid-100"},D("h3",null,"Install")),D("div",{className:"prefix-30 grid-40 suffix-30"},D("b",{style:{display:"block",textAlign:"center"}},"npm"),D("pre",null,D("code",{className:"language-bash"},"$ npm install react-native-csv --save")),D("br",null),D("b",{style:{display:"block",textAlign:"center"}},"yarn"),D("pre",null,D("code",{className:"language-bash"},"$ yarn add react-native-csv --save"))),D("div",{className:"clear"}),D("div",{className:"grid-100 text-center"},D("br",null),D("br",null),D("a",{href:"https://github.com/Bunlong/react-native-csv",className:"button"},D("i",{className:"fa fa-github"}),"\xa0 GitHub"),D("a",{href:"/docs",className:"button gray"},D("i",{className:"fa fa-book"}),"\xa0 Documentation"))))},O=r.a.createElement;a.default=function(){return O(r.a.Fragment,null,O(i,null),O("main",null,O(o,null),O(d,null),O(m,null),O(p,null),O(h,null),O(N,null),O(b,null),O(S,null),O(C,null),O(x,null),O(V,null),O(T,null),O(I,null),O(_,null)))}},vlRD:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return n("RNiq")}])}},[["vlRD",0,1]]]);